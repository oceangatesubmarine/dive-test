"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[34],{5034:function(e,n,t){t.r(n),t.d(n,{default:function(){return C}});var a=[{id:"omni-counter",href:"https://layerzero.gitbook.io/getting-started/code-examples/messagecounter.sol",title:"OmniCounter.sol",text:"A LayerZero User Application example to demonstrate message sending.",example:'pragma solidity 0.8.4;\npragma abicoder v2;\n\nimport "../lzApp/NonblockingLzApp.sol";\n\ncontract OmniCounter is NonblockingLzApp {\n    uint public counter;\n\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\n\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory) internal override {\n        counter += 1;\n    }\n\n    function incrementCounter(uint16 _dstChainId) public payable {\n        _lzSend(_dstChainId, bytes(""), payable(msg.sender), address(0x0), bytes(""));\n    }\n}',blocks:[{type:"html",content:"\n        <article>\n          <h2>OmniCounter.sol</h2>\n          <p>A LayerZero User Application example to demonstrate message sending.</p>\n          <h3>The cross chain OmniCounter</h3>\n          <p>OmniCounter.sol is a classic example of a simple contract that increments a counter -- but there's a twist. This OmniCounter increments the counter on another chain.</p>\n          <hr>\n        </article>\n      "},{type:"html",content:'\n        <article>\n          <h3>The Details</h3>\n          <p>To enable cross chain messages, contracts will use an <em>endpoint</em> to <em>send()</em> and <em>lzReceive()</em> to receive the message at the destination. Here you may find a table of <a href="https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses"><strong>the Testnet Endpoints.</strong></a></p>\n          <p>OmniCounter.sol implements <a href="https://layerzero.gitbook.io/docs/guides/advanced/nonblockinglzapp"><strong>NonblockingLzApp</strong><a/>, a proxy layer to try-catch all errors/exceptions, which implements  <a href="https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/lzApp/LzApp.sol"><strong>LzApp</strong><a/>, a generic LzReceiver implementation.</p>\n         <br>\n          <p>OmniCounter.sol can send and receive LayerZero messages. Let\'s highlight the two important features of this contract:</p>\n\n          <ul>\n            <li><em>_lzSend()</em> is overridden and called within <em>incrementCounter()</em> to send the message to another chain.</li>\n            <li><em>_nonblockingLzReceive()</em> is overridden and it will be called on the destination chain which receives the message.  </li>\n          </ul>\n\n          <p>If you want to deploy and try this contract yourself you will need to construct it with an Endpoint address. And will need the two interfaces.</p>\n        </article>\n      '},{type:"code",content:'// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma abicoder v2;\n\nimport "../lzApp/NonblockingLzApp.sol";\n\n/// @title A LayerZero example sending a cross chain message from a source chain to a destination chain to increment a counter\ncontract OmniCounter is NonblockingLzApp {\n    uint public counter;\n\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\n\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory) internal override {\n        counter += 1;\n    }\n\n    function incrementCounter(uint16 _dstChainId) public payable {\n        _lzSend(_dstChainId, bytes(""), payable(msg.sender), address(0x0), bytes(""));\n    }\n}'},{type:"html",content:"\n        <article>\n          <p>If you were to deploy this contract, you would need to do so on each chain you want. Once deployed, you could call incrementCounter from the source chain, to increment the counter on the destintation chain, like this:</p>\n        </article>\n      "},{type:"code",content:"# assume we are on Rinkeby  and we also deployed the same contract on Fuji\nlet OmniCounter = await ethers.getContractFactory('OmniCounter')\nlet omniCounter = await OmniCounter.deploy(endpointAddress);\nlet fujiChainId = 10006;\nawait omniCounter.incrementCounter(fujiChainId, fujiOmniCounterAddress, {value: ethers.utils.parseEther('0.003')});"}]},{id:"PingPong.sol",href:"https://layerzero.gitbook.io/docs/guides/code-examples/pingpong.sol",title:"PingPong.sol",text:"An example to demonstrate estimateFees() and a recursive call within lzReceive()",example:'pragma solidity 0.8.4;\npragma abicoder v2;\n\nimport "@openzeppelin/contracts/security/Pausable.sol";\nimport "../lzApp/NonblockingLzApp.sol";\n\ncontract PingPong is NonblockingLzApp, Pausable {\n    // event emitted every ping() to keep track of consecutive pings count\n    event Ping(uint pings);\n\n    // constructor requires the LayerZero endpoint for this chain\n    constructor(address _endpoint) NonblockingLzApp(_endpoint) {}\n\n    // disable ping-ponging\n    function enable(bool en) external {\n        if (en) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n  ',blocks:[{type:"html",content:"\n      <article>\n        <h2>PingPong.sol</h2>\n        <p>An example to demonstrate estimateFees() and a recursive call within lzReceive()</p>\n        <br>\n        <p>Warning: This contract will continuously send calls between two chains until one of them runs out of gas!</p>\n        <hr>\n      </article>\n    "},{type:"html",content:"\n      <article>\n        <p>This example contract demonstrates:</p>\n        <ul>\n          <li>estimateFees(): how to get the message fee</li>\n          <li>calling send() within _nonblockingLzReceive()</li>\n          <li><em>_nonblockingLzReceive()</em> is overridden and it will be called on the destination chain which receives the message.  </li>\n          <li>using a contract to pay the message fee (as opposed to the msg.sender)</li>\n        </ul>\n      </article>\n    "},{type:"code",content:'// SPDX-License-Identifier: MIT\n\n//\n// Note: you will need to fund each deployed contract with gas\n//\n// PingPong sends a LayerZero message back and forth between chains\n// until it is paused or runs out of gas!\n//\n// Demonstrates:\n//  1. a recursive feature of calling send() from inside lzReceive()\n//  2. how to `estimateFees` for a send()\'ing a LayerZero message\n//  3. the contract pays the message fee\n\npragma solidity 0.8.4;\npragma abicoder v2;\n\nimport "@openzeppelin/contracts/security/Pausable.sol";\nimport "../lzApp/NonblockingLzApp.sol";\n\ncontract PingPong is NonblockingLzApp, Pausable {\n    // event emitted every ping() to keep track of consecutive pings count\n    event Ping(uint pings);\n\n    // constructor requires the LayerZero endpoint for this chain\n    constructor(address _endpoint) NonblockingLzApp(_endpoint) {}\n\n    // disable ping-ponging\n    function enable(bool en) external {\n        if (en) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    // pings the destination chain, along with the current number of pings sent\n    function ping(\n        uint16 _dstChainId, // send a ping to this destination chainId\n        address _dstPingPongAddr, // destination address of PingPong contract\n        uint pings // the number of pings\n    ) public whenNotPaused {\n        require(this.isTrustedRemote(_dstChainId, abi.encodePacked(_dstPingPongAddr)), "you must allow inbound messages to ALL contracts with setTrustedRemote()");\n        require(address(this).balance > 0, "the balance of this contract is 0. pls send gas for message fees");\n\n        emit Ping(++pings);\n\n        // encode the payload with the number of pings\n        bytes memory payload = abi.encode(pings);\n\n        // use adapterParams v1 to specify more gas for the destination\n        uint16 version = 1;\n        uint gasForDestinationLzReceive = 350000;\n        bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\n\n        // get the fees we need to pay to LayerZero for message delivery\n        (uint messageFee, ) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, false, adapterParams);\n        require(address(this).balance >= messageFee, "address(this).balance < messageFee. fund this contract with more ether");\n\n        // send LayerZero message\n        lzEndpoint.send{value: messageFee}( // {value: messageFee} will be paid out of this contract!\n            _dstChainId, // destination chainId\n            abi.encodePacked(_dstPingPongAddr), // destination address of PingPong contract\n            payload, // abi.encode()\'ed bytes\n            payable(this), // (msg.sender will be this contract) refund address (LayerZero will refund any extra gas back to caller of send()\n            address(0x0), // future param, unused for this example\n            adapterParams // v1 adapterParams, specify custom destination gas qty\n        );\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64, /*_nonce*/\n        bytes memory _payload\n    ) internal override {\n        // use assembly to extract the address from the bytes memory parameter\n        address sendBackToAddress;\n        assembly {\n            sendBackToAddress := mload(add(_srcAddress, 20))\n        }\n\n        // decode the number of pings sent thus far\n        uint pings = abi.decode(_payload, (uint));\n\n        // *pong* back to the other side\n        ping(_srcChainId, sendBackToAddress, pings);\n    }\n\n    // allow this contract to receive ether\n    receive() external payable {}\n}\n'}]},{id:"LZEndpointMock.sol",href:"https://layerzero.gitbook.io/docs/guides/code-examples/lzendpointmock.sol",title:"LZEndpointMock.sol",text:"A mock LayerZero endpoint contract for local testing.",example:'pragma solidity ^0.8.4;\npragma abicoder v2;\n\nimport "../interfaces/ILayerZeroReceiver.sol";\nimport "../interfaces/ILayerZeroEndpoint.sol";\n\ncontract LZEndpointMock is ILayerZeroEndpoint {\n    mapping(address => address) public lzEndpointLookup;\n\n    uint16 public mockChainId;\n    address payable public mockOracle;\n    address payable public mockRelayer;\n    uint public mockBlockConfirmations;\n    uint16 public mockLibraryVersion;\n    uint public mockStaticNativeFee;\n    uint16 public mockLayerZeroVersion;\n    uint public nativeFee;\n    uint public zroFee;\n    bool nextMsgBLocked;\n\n    struct StoredPayload {\n        uint64 payloadLength;\n        address dstAddress;\n        bytes32 payloadHash;\n    }\n\n    struct QueuedPayload {\n        address dstAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\t',blocks:[{type:"html",content:"\n      <article>\n        <h2>LZEndpointMock.sol</h2>\n        <p>A mock LayerZero endpoint contract for local testing.</p>\n      </article>\n    "},{type:"code",content:'// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\npragma abicoder v2;\n\nimport "../interfaces/ILayerZeroReceiver.sol";\nimport "../interfaces/ILayerZeroEndpoint.sol";\n\n/*\nmocking multi endpoint connection.\n- send() will short circuit to lzReceive() directly\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\n*/\ncontract LZEndpointMock is ILayerZeroEndpoint {\n    mapping(address => address) public lzEndpointLookup;\n\n    uint16 public mockChainId;\n    address payable public mockOracle;\n    address payable public mockRelayer;\n    uint public mockBlockConfirmations;\n    uint16 public mockLibraryVersion;\n    uint public mockStaticNativeFee;\n    uint16 public mockLayerZeroVersion;\n    uint public nativeFee;\n    uint public zroFee;\n    bool nextMsgBLocked;\n\n    struct StoredPayload {\n        uint64 payloadLength;\n        address dstAddress;\n        bytes32 payloadHash;\n    }\n\n    struct QueuedPayload {\n        address dstAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    // inboundNonce = [srcChainId][srcAddress].\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\n    // outboundNonce = [dstChainId][srcAddress].\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\n    // storedPayload = [srcChainId][srcAddress]\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\n    // msgToDeliver = [srcChainId][srcAddress]\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\n\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\n\n    constructor(uint16 _chainId) {\n        mockStaticNativeFee = 42;\n        mockLayerZeroVersion = 1;\n        mockChainId = _chainId;\n    }\n\n    // mock helper to set the value returned by `estimateNativeFees`\n    function setEstimatedFees(uint _nativeFee, uint _zroFee) public {\n        nativeFee = _nativeFee;\n        zroFee = _zroFee;\n    }\n\n    function getChainId() external view override returns (uint16) {\n        return mockChainId;\n    }\n\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\n    }\n\n    function send(\n        uint16 _chainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable, // _refundAddress\n        address, // _zroPaymentAddress\n        bytes memory _adapterParams\n    ) external payable override {\n        address destAddr = packedBytesToAddr(_destination);\n        address lzEndpoint = lzEndpointLookup[destAddr];\n\n        require(lzEndpoint != address(0), "LayerZeroMock: destination LayerZero Endpoint not found");\n\n        require(msg.value >= nativeFee * _payload.length, "LayerZeroMock: not enough native for fees");\n\n        uint64 nonce;\n        {\n            nonce = ++outboundNonce[_chainId][msg.sender];\n        }\n\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\n        {\n            uint extraGas;\n            uint dstNative;\n            address dstNativeAddr;\n            assembly {\n                extraGas := mload(add(_adapterParams, 34))\n                dstNative := mload(add(_adapterParams, 66))\n                dstNativeAddr := mload(add(_adapterParams, 86))\n            }\n\n            // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance\n        }\n\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\n\n        // not using the extra gas parameter because this is a single tx call, not split between different chains\n        // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, 0, _payload);\n    }\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint, /*_gasLimit*/\n        bytes calldata _payload\n    ) external override {\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\n\n        // assert and increment the nonce. no message shuffling\n        require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], "LayerZero: wrong nonce");\n\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\n        if (sp.payloadHash != bytes32(0)) {\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\n\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\n            if (msgs.length > 0) {\n                // extend the array\n                msgs.push(newMsg);\n\n                // shift all the indexes up for pop()\n                for (uint i = 0; i < msgs.length - 1; i++) {\n                    msgs[i + 1] = msgs[i];\n                }\n\n                // put the newMsg at the bottom of the stack\n                msgs[0] = newMsg;\n            } else {\n                msgs.push(newMsg);\n            }\n        } else if (nextMsgBLocked) {\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\n            emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, bytes(""));\n            // ensure the next msgs that go through are no longer blocked\n            nextMsgBLocked = false;\n        } else {\n            // we ignore the gas limit because this call is made in one tx due to being "same chain"\n            // ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\n            ILayerZeroReceiver(_dstAddress).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\n        }\n    }\n\n    // used to simulate messages received get stored as a payload\n    function blockNextMsg() external {\n        nextMsgBLocked = true;\n    }\n\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\n    }\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16, address, bytes memory _payload, bool, bytes memory) external view override returns (uint _nativeFee, uint _zroFee) {\n        _nativeFee = nativeFee * _payload.length;\n        _zroFee = zroFee;\n    }\n\n    // give 20 bytes, return the decoded address\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\n        address addr;\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\n            addr := mload(sub(ptr, 10))\n        }\n        return addr;\n    }\n\n    // given an address, return the 20 bytes\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\n        bytes memory data = abi.encodePacked(_a);\n        return data;\n    }\n\n    function setConfig(\n        uint16, /*_version*/\n        uint16, /*_chainId*/\n        uint, /*_configType*/\n        bytes memory /*_config*/\n    ) external override {}\n\n    function getConfig(\n        uint16, /*_version*/\n        uint16, /*_chainId*/\n        address, /*_ua*/\n        uint /*_configType*/\n    ) external pure override returns (bytes memory) {\n        return "";\n    }\n\n    function setSendVersion(\n        uint16 /*version*/\n    ) external override {}\n\n    function setReceiveVersion(\n        uint16 /*version*/\n    ) external override {}\n\n    function getSendVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function getReceiveVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {\n        return inboundNonce[_chainID][_srcAddress];\n    }\n\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\n        return outboundNonce[_chainID][_srcAddress];\n    }\n\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress) internal {\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\n\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\n        while (msgs.length > 0) {\n            QueuedPayload memory payload = msgs[msgs.length - 1];\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _srcAddress, payload.nonce, payload.payload);\n            msgs.pop();\n        }\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\n        // revert if no messages are cached. safeguard malicious UA behaviour\n        require(sp.payloadHash != bytes32(0), "LayerZero: no stored payload");\n        require(sp.dstAddress == msg.sender, "LayerZero: invalid caller");\n\n        // empty the storedPayload\n        sp.payloadLength = 0;\n        sp.dstAddress = address(0);\n        sp.payloadHash = bytes32(0);\n\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\n\n        // resume the receiving of msgs after we force clear the "stuck" msg\n        _clearMsgQue(_srcChainId, _srcAddress);\n    }\n\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override {\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\n        require(sp.payloadHash != bytes32(0), "LayerZero: no stored payload");\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, "LayerZero: invalid payload");\n\n        address dstAddress = sp.dstAddress;\n        // empty the storedPayload\n        sp.payloadLength = 0;\n        sp.dstAddress = address(0);\n        sp.payloadHash = bytes32(0);\n\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\n\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\n    }\n\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\n        return sp.payloadHash != bytes32(0);\n    }\n\n    function isSendingPayload() external pure override returns (bool) {\n        return false;\n    }\n\n    function isReceivingPayload() external pure override returns (bool) {\n        return false;\n    }\n\n    function getSendLibraryAddress(address) external view override returns (address) {\n        return address(this);\n    }\n\n    function getReceiveLibraryAddress(address) external view override returns (address) {\n        return address(this);\n    }\n}\n\n\t\t\t\t'}]}],s=t(8064),r=t(8869),i=t(1465),o=t.n(i),d=t(7294),c=t(946),l=t(6038),p=!1,u=!1,m=function(e,n){p=l.ZP.to(e,{duration:.5,height:"auto",ease:"expo.out"}),u=l.ZP.to(n,{duration:.5,opacity:1,ease:"power2.out"})},h=function(e,n){g(),p=l.ZP.to(e,{duration:.5,height:0,ease:"expo.out"}),u=l.ZP.to(n,{duration:.25,opacity:0,ease:"power2.out"})},g=function(){p&&(p.kill(),p=!1),u&&(u.kill(),u=!1)},y=t(5944);var b={name:"3n37wh",styles:"margin:0px;display:flex;align-items:flex-start;padding-top:2.5rem;padding-bottom:2.5rem;@media (min-width: 768px){padding-top:1.75rem;padding-bottom:1.75rem;}@media (min-width: 1920px){padding-top:3rem;padding-bottom:3rem;}"},f={name:"a30kk6",styles:"opacity:0.4;margin-top:0.125rem;font-weight:400;@media (min-width: 768px){margin-top:0.25rem;}"},v={name:"15sxmbc",styles:"opacity:0.4;margin-top:0.125rem;font-weight:400;margin-left:0.5rem;margin-right:1.25rem;@media (min-width: 768px){margin-top:0.25rem;}"},_={name:"ni3hao",styles:"display:flex;flex-direction:column;opacity:0;@media (min-width: 768px){flex-direction:row;}"},k={name:"a3zqf9",styles:"margin-top:-1.25rem;margin-bottom:1.75rem;opacity:0.6;line-height:1.25;@media (min-width: 768px){margin-top:0px;margin-bottom:0px;width:50%;}"},A={name:"1n12gsz",styles:"display:flex;flex-direction:column;flex-shrink:0;@media (min-width: 768px){width:50%;margin-left:2rem;}@media (min-width: 1920px){margin-left:5rem;}"},x={name:"12xni2o",styles:"width:100%;font-weight:700;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity));pointer-events:auto"};var w=function(e){var n=e.example,t=e.index,s=o()(),i=(0,d.useRef)([]),l=(0,d.useRef)([]),p=(0,c.e)(),u=(0,d.useState)(!1),g=u[0],w=u[1],L=function(){p.asideHrefRef.current=a[t].href,p.asideContentRef.current=a[t].blocks,p.setAsideOpen(!0)};return(0,y.BX)("div",{className:"accordion",onClick:function(){!s&&L(),s&&(g?h(i.current,l.current):m(i.current,l.current),w(!g))},onMouseEnter:function(){s||m(i.current,l.current)},onMouseLeave:function(){s||p.asideOpen||h(i.current,l.current)},children:[(0,y.BX)("h3",{className:"text-24",css:b,children:[(0,y.tZ)("span",{className:"text-12",css:f,children:t+1<10?"0".concat(t+1):t+1}),(0,y.tZ)("span",{className:"text-12",css:v,children:"/"}),n.title]}),(0,y.BX)("div",{css:_,onClick:function(){s&&L()},ref:function(e){i.current.push(e),l.current.push(e)},children:[(0,y.tZ)("p",{css:k,className:"text-16",children:n.text}),(0,y.BX)("div",{className:"code",css:A,children:[(0,y.tZ)(r.Z,{language:"javascript",showLineNumbers:!0,showInlineLineNumbers:!0,style:"none",children:n.example}),(0,y.tZ)("button",{type:"button",className:"text-12 is-uppercase",css:x,children:"+ View more details"})]})]},n.id)]},n.id)};var L=(0,t(2192).Z)("section",{target:"e1vncezz0"})({name:"krynx2",styles:".accordion{border-top:1px solid rgba(255, 255, 255, 0.2);cursor:pointer;~a{margin:calc(40 / 16 * 1rem) 0 0;@media (min-width: 768px){margin:calc(30 / 16 * 1rem) 0 0;}@media (min-width: 1920px){margin:calc(50 / 16 * 1rem) 0 0;}}h3~div{height:0;}&:last-of-type{border-bottom:1px solid rgba(255, 255, 255, 0.2);}.code{border:1px solid #141414;transform:translate(0, 1px);position:relative;overflow:hidden;pointer-events:none;@media (min-width: 768px){margin-top:calc(-55 / 16 * 1rem);}@media (min-width: 1920px){margin-top:calc(-80 / 16 * 1rem);}}pre{padding:1.25rem;font-size:calc(10 / 16 * 1rem);height:calc(160 / 16 * 1rem);position:relative;&::after{content:'';width:100%;height:75%;position:absolute;left:0;bottom:0;background:linear-gradient(0deg, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 100%);}@media (min-width: 1920px){font-size:calc(14 / 16 * 1rem);height:calc(210 / 16 * 1rem);padding:calc(40 / 16 * 1rem);}.linenumber{margin-right:1.25rem!important;}}.hljs-keyword{color:#A77DFF;}.hljs-title,.hljs-string{color:#EB3874;}button{background-color:#141414;border:none;cursor:pointer;padding:1rem;position:relative;&:focus{outline:none;}}}"});var P={name:"12v43tp",styles:"padding-bottom:6rem;@media (min-width: 768px){padding-bottom:8rem;}@media (min-width: 1024px){padding-bottom:11rem;}@media (min-width: 1920px){padding-bottom:16rem;}"},z={name:"zqq8f0",styles:"grid-column:span 10 / span 10;display:flex;flex-direction:column;@media (min-width: 768px){grid-column:span 6 / span 6;grid-column-start:3;}"},I={name:"zucfw6",styles:"margin-bottom:2.5rem;@media (min-width: 1920px){margin-bottom:3.5rem;}"};var C=function(){return(0,y.tZ)(L,{css:P,children:(0,y.tZ)("div",{className:"container is-grid wrapper",children:(0,y.BX)("div",{css:z,children:[(0,y.tZ)("h2",{className:"text-40",css:I,children:"Examples"}),a.map((function(e,n){return(0,y.tZ)(w,{example:e,index:n},e.id)})),(0,y.tZ)(s.Z,{label:"View more code examples on github",href:"https://github.com/LayerZero-Labs/solidity-examples",target:"_blank"})]})})})}}}]);